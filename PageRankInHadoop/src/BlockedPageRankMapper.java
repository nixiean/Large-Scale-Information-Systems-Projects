import java.io.IOException;

import org.apache.hadoop.io.*;
import org.apache.hadoop.mapreduce.*;

public class BlockedPageRankMapper  extends Mapper<LongWritable, Text, Text, Text>{
	private static final String COL_DELIMITER = "\\s+";
	private static final String NODE_DELIMITER = ",";
	
	@Override
	protected void map(LongWritable key, Text value,
			Mapper<LongWritable, Text, Text, Text>.Context context)
			throws IOException, InterruptedException {
		//for mapper key is generated by hadoop so we can safely discard it, value is what we are looking for
		
		//e.g. 0 1.45936400916e-06 7 303743,303746,303747,303759,303761,312703,341837
		String[] input = value.toString().trim().split(COL_DELIMITER);
		String nodeId = input[0];
		String pageRank = input[1];
		int numOfOutEdge = Integer.parseInt(input[2]);
		
		int nodeBlockId = BlockedPRDriver.blockIDofNode(Integer.parseInt(nodeId));
		String outLinks = "";
		
		if(numOfOutEdge != 0) {
			outLinks = input[3];
		}
		
		Text currNodeBlockIdText = new Text(String.valueOf(nodeBlockId));
		Text currentNodeEmitVal = new Text("PR" + " " + nodeId + " " + pageRank + " " + outLinks);
		//mapper will emit its own page rank first
		//e.g   1 --> (PR 1 0.333 2,3)
		context.write(currNodeBlockIdText, currentNodeEmitVal);
		
		//if there is any outedges from this node, u->v check for two cases BE,BC  
		// 
		if(numOfOutEdge != 0) {
			String[] outNodes = outLinks.split(NODE_DELIMITER);
			for(String outNode : outNodes) {
				int outgoingNodeBlockId = BlockedPRDriver.blockIDofNode(Integer.parseInt(outNode));
				Text outgoingNodeBlockIdKey = new Text(String.valueOf(outgoingNodeBlockId));
				Text outgoingNodeEmitValue;
				if(outgoingNodeBlockId == nodeBlockId) {
					//BE = {<u,v> | u belongs to B and u->v  : emit u v} , v is receiving
					outgoingNodeEmitValue = new Text("BE" + " " + nodeId + " " + outNode);
				} else {
					//BC = {<u,v,R> | u doesn't belong to B and v belongs to B and u->v}
					//pageRank is pageRank of u
					float R = Float.parseFloat(pageRank)/(float)numOfOutEdge ;
					outgoingNodeEmitValue = new Text("BC" + " " + nodeId + " " + outNode + " " + String.valueOf(R));
				}
				context.write(outgoingNodeBlockIdKey, outgoingNodeEmitValue);
			}
		}
	}
}
